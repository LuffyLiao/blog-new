(window.webpackJsonp=window.webpackJsonp||[]).push([[55],{575:function(t,s,a){"use strict";a.r(s);var e=a(7),n=Object(e.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h3",{attrs:{id:"基本概念"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#基本概念"}},[t._v("#")]),t._v(" 基本概念")]),t._v(" "),a("h4",{attrs:{id:"什么是正则"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#什么是正则"}},[t._v("#")]),t._v(" 什么是正则")]),t._v(" "),a("blockquote",[a("p",[t._v("正则表达式（Regular Expression，在代码中常简写为regex、regexp或RE）使用单个字符串来描述、匹配一系列符合某个句法规则的字符串搜索模式。搜索模式可用于文本搜索和文本替换。它用一系列字符定义搜索模式。")])]),t._v(" "),a("h4",{attrs:{id:"基本用途"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#基本用途"}},[t._v("#")]),t._v(" 基本用途")]),t._v(" "),a("ul",[a("li",[t._v("表单输入验证")]),t._v(" "),a("li",[t._v("搜索和替换")]),t._v(" "),a("li",[t._v("过滤文本信息")]),t._v(" "),a("li",[t._v("贪婪匹配")]),t._v(" "),a("li",[t._v("...")])]),t._v(" "),a("h3",{attrs:{id:"创建方式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#创建方式"}},[t._v("#")]),t._v(" 创建方式")]),t._v(" "),a("p",[t._v("js中创建正则表达式的方式主要有两种：\n"),a("strong",[t._v("1. 字面量：")]),t._v("\n正则表达式直接放在"),a("code",[t._v("/ /")]),t._v("之中：")]),t._v(" "),a("div",{staticClass:"language-javascript extra-class"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" regexp "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token regex"}},[a("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),a("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[t._v("ABC\\-001")]),a("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),a("span",{pre:!0,attrs:{class:"token regex-flags"}},[t._v("g")])]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("正则表达式主体"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("修饰符")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("可选"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("p",[a("strong",[t._v("2.构造函数：")]),t._v(" RegExp对象表示正则表达式的一个实例")]),t._v(" "),a("div",{staticClass:"language-javascript extra-class"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" regex "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("RegExp")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'ABC\\\\-001'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'g'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// new RegExp('正则表达式主体','修饰符')")]),t._v("\n")])])]),a("p",[t._v("注意，如果使用第二种写法，因为字符串转义的问题，字符串中的两个"),a("code",[t._v("\\\\")]),t._v("实际上是一个"),a("code",[t._v("\\")])]),t._v(" "),a("h4",{attrs:{id:"字符集合"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#字符集合"}},[t._v("#")]),t._v(" 字符集合: []")]),t._v(" "),a("p",[t._v("[]: 会匹配包含的任意一个字符.\n假设我需要匹配，a,b,c这些类型的字符，就可以通过使用"),a("code",[t._v("[字符集合]")]),t._v("来处理")]),t._v(" "),a("div",{staticClass:"language-javascript extra-class"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" regexp "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("RegExp")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'[abc]'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'adsdasdcvvbsc'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("match")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("regexp"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("p",[a("code",[t._v("[^]")]),t._v(": 括号中以"),a("code",[t._v("^")]),t._v("开头，表示取反")]),t._v(" "),a("h4",{attrs:{id:"字符范围-a-z"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#字符范围-a-z"}},[t._v("#")]),t._v(" 字符范围: [a-z]")]),t._v(" "),a("p",[t._v("常见的字符范围有：")]),t._v(" "),a("ul",[a("li",[t._v("[部分范围]："),a("code",[t._v("[a-f]")]),t._v("，匹配a到f的任意字符")]),t._v(" "),a("li",[t._v("[小写范围]："),a("code",[t._v("[a-z]")]),t._v("，匹配a到z的任意字符")]),t._v(" "),a("li",[t._v("[大写范围]："),a("code",[t._v("[A-Z]")]),t._v("，匹配A到Z的任意字符")]),t._v(" "),a("li",[t._v("[数字范围]："),a("code",[t._v("[0-9]")]),t._v("，匹配0到9的任意字符")]),t._v(" "),a("li",[t._v("[符号范围]："),a("code",[t._v("[#$%&@]")])]),t._v(" "),a("li",[t._v("[混合范围]："),a("code",[t._v("[a-zA-Z0-9]")]),t._v("，匹配所有数字、大小写字母中的任意字符")])]),t._v(" "),a("h4",{attrs:{id:"数字字符"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#数字字符"}},[t._v("#")]),t._v(" 数字字符")]),t._v(" "),a("p",[t._v("如果想要匹配三个字母的单词，根据上面我们学到的字符范围，可以这样来写")]),t._v(" "),a("div",{staticClass:"language-javascript extra-class"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("a"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("z"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("a"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("z"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("a"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("z"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n")])])]),a("p",[t._v("这里我们匹配的三个字母的单词，那如果想要匹配10个、20个字母的单词呢？难道要一个个来写范围吗？有一种更好的方法就是使用花括号"),a("code",[t._v("{}")]),t._v("来表示，来看例子：")]),t._v(" "),a("div",{staticClass:"language-javascript extra-class"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("a"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("z"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 表示要连续匹配到5个小写字母")]),t._v("\n")])])]),a("p",[t._v("匹配重复字符的完整语法是这样的："),a("code",[t._v("{m,n}")]),t._v("，它会匹配前面一个字符至少 "),a("code",[t._v("m")]),t._v(" 次至多 "),a("code",[t._v("n")]),t._v(" 次重复，"),a("code",[t._v("{m}")]),t._v("表示匹配 "),a("code",[t._v("m")]),t._v(" 次，"),a("code",[t._v("{m,}")]),t._v("表示至少 "),a("code",[t._v("m")]),t._v(" 次。")]),t._v(" "),a("h4",{attrs:{id:"元字符"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#元字符"}},[t._v("#")]),t._v(" 元字符")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("\\d")]),t._v("：相当于"),a("code",[t._v("[0-9]")]),t._v("，匹配任意数字")]),t._v(" "),a("li",[a("code",[t._v("\\D")]),t._v("：相当于"),a("code",[t._v("[^0-9]")])]),t._v(" "),a("li",[a("code",[t._v("\\w")]),t._v("：相当于"),a("code",[t._v("[0-9a-zA-Z]")]),t._v("，匹配任意数字、大小写字母和下划线")]),t._v(" "),a("li",[a("code",[t._v("\\W")]),t._v("：相当于"),a("code",[t._v("[^0-9a-zA-Z]")])]),t._v(" "),a("li",[a("code",[t._v("\\s")]),t._v("：相当于"),a("code",[t._v("[\\t\\v\\n\\r\\f]")]),t._v("，匹配任意空白符，包括空格，水平制表符"),a("code",[t._v("\\t")]),t._v("，垂直制表符"),a("code",[t._v("\\v")]),t._v("，换行符"),a("code",[t._v("\\n")]),t._v("，回车符"),a("code",[t._v("\\r")]),t._v("，换页符"),a("code",[t._v("\\f")])]),t._v(" "),a("li",[a("code",[t._v("\\S")]),t._v("：相当于"),a("code",[t._v("[^\\t\\v\\n\\r\\f]")]),t._v("，表示非空白符")])]),t._v(" "),a("h4",{attrs:{id:"特殊字符"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#特殊字符"}},[t._v("#")]),t._v(" 特殊字符")]),t._v(" "),a("p",[t._v("使用特殊字符可以编写更高级的模式表达式，常见的特殊字符如下：")]),t._v(" "),a("ul",[a("li",[a("code",[t._v(".")]),t._v("：匹配除了换行符之外的任何单个字符,"),a("strong",[t._v("慎用")]),t._v("~")]),t._v(" "),a("li",[a("code",[t._v("\\")]),t._v("：将下一个字符标记为特殊字符、或原义字符、或向后引用、或八进制转义符")]),t._v(" "),a("li",[a("code",[t._v("|")]),t._v("：逻辑或操作符")]),t._v(" "),a("li",[a("code",[t._v("[^]")]),t._v("：取非，匹配未包含的任意字符")])]),t._v(" "),a("h4",{attrs:{id:"位置匹配"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#位置匹配"}},[t._v("#")]),t._v(" 位置匹配")]),t._v(" "),a("p",[t._v("常见的位置匹配如下：")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("^")]),t._v("：匹配开头，在多行匹配中匹配行开头,"),a("code",[t._v("^abc")]),t._v(" 表示匹配有 "),a("code",[t._v("abc")]),t._v(" 开头的字符串")]),t._v(" "),a("li",[a("code",[t._v("$")]),t._v("：匹配结尾，在多行匹配中匹配行结尾,"),a("code",[t._v("^\\d$")]),t._v(" 表示匹配一个 "),a("code",[t._v("[0-9]")]),t._v(" 的数字")]),t._v(" "),a("li",[a("code",[t._v("\\b")]),t._v("：匹配一个单词边界，也就是指单词和空格间的位置,"),a("code",[t._v("er\\b")]),t._v(" 可以匹配 "),a("code",[t._v("never")]),t._v(" 中的 "),a("code",[t._v("er")]),t._v("，但不能匹配 "),a("code",[t._v("verb")]),t._v(" 中的 "),a("code",[t._v("er")])]),t._v(" "),a("li",[a("code",[t._v("\\B")]),t._v("：匹配非单词边界, "),a("code",[t._v("er\\B")]),t._v(" 不可以匹配 "),a("code",[t._v("never")]),t._v(" 中的 "),a("code",[t._v("er")]),t._v("，但能匹配 "),a("code",[t._v("verb")]),t._v(" 中的 "),a("code",[t._v("er")])]),t._v(" "),a("li",[a("code",[t._v("(?=p)")]),t._v("：匹配 p 前面的位置")]),t._v(" "),a("li",[a("code",[t._v("(?!=p)")]),t._v("：匹配不是 p 前面的位置")])]),t._v(" "),a("h3",{attrs:{id:"匹配规则"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#匹配规则"}},[t._v("#")]),t._v(" 匹配规则")]),t._v(" "),a("p",[t._v("整理了部分常见的匹配规则，具体如下：")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("字符")]),t._v(" "),a("th",[t._v("说明")]),t._v(" "),a("th",[t._v("例子")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[a("code",[t._v("\\")])]),t._v(" "),a("td",[t._v("将下一个字符标记为特殊字符")]),t._v(" "),a("td",[a("code",[t._v("\\n")]),t._v(" 表示换行符、"),a("code",[t._v("\\d")]),t._v("匹配 [0-9] 的数字")])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("^")])]),t._v(" "),a("td",[t._v("匹配字符串的开始位置")]),t._v(" "),a("td",[a("code",[t._v("^abc")]),t._v(" 表示匹配有 "),a("code",[t._v("abc")]),t._v(" 开头的字符串")])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("$")])]),t._v(" "),a("td",[t._v("匹配字符串的结束位置")]),t._v(" "),a("td",[a("code",[t._v("^\\d$")]),t._v(" 表示匹配一个 "),a("code",[t._v("[0-9]")]),t._v(" 的数字")])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("*")])]),t._v(" "),a("td",[t._v("匹配前面的子表达式零次或多次")]),t._v(" "),a("td",[a("code",[t._v("zo*")]),t._v(" 能匹配 "),a("code",[t._v("z")]),t._v(" 或者 "),a("code",[t._v("zoo")])])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("+")])]),t._v(" "),a("td",[t._v("匹配前面的子表达式一次或多次")]),t._v(" "),a("td",[a("code",[t._v("zo+")]),t._v(" 能匹配 "),a("code",[t._v("zo")]),t._v(" 或者 "),a("code",[t._v("zoo")]),t._v("，但不能匹配 "),a("code",[t._v("z")])])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("?")])]),t._v(" "),a("td",[t._v("匹配前面的子表达式零次或一次")]),t._v(" "),a("td",[a("code",[t._v("do(es)?")]),t._v(" 可以匹配 "),a("code",[t._v("does")]),t._v(" 或 "),a("code",[t._v("do")])])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("{n}")])]),t._v(" "),a("td",[t._v("n是一个非负整数。匹配确定的 n 次")]),t._v(" "),a("td",[a("code",[t._v("o{2}")]),t._v("不能匹配"),a("code",[t._v("Bob")]),t._v("中的"),a("code",[t._v("o")]),t._v("，但是能匹配 "),a("code",[t._v("food")]),t._v(" 中的两个 "),a("code",[t._v("o")])])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("{n,}")])]),t._v(" "),a("td",[t._v("n是一个非负整数。至少匹配 n 次")]),t._v(" "),a("td",[a("code",[t._v("o{2,}")]),t._v("不能匹配"),a("code",[t._v("Bob")]),t._v("中的"),a("code",[t._v("o")]),t._v("，但能匹配"),a("code",[t._v("foooood")]),t._v(" 中的所有"),a("code",[t._v("o")]),t._v("。"),a("code",[t._v("o{1,}")]),t._v(" 等价于"),a("code",[t._v("o+")]),t._v("。"),a("code",[t._v("o{0,}")]),t._v(" 则等价于 "),a("code",[t._v("o*")])])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("{n,m}")])]),t._v(" "),a("td",[t._v("m 和 n 均为非负整数，其中 n <= m。最少匹配 n 次且最多匹配 m 次")]),t._v(" "),a("td",[a("code",[t._v("o{1,3}")]),t._v(" 将匹配"),a("code",[t._v("fooooood")]),t._v("中的前三个"),a("code",[t._v("o")]),t._v("。"),a("code",[t._v("o{0,1}")]),t._v(" 等价于"),a("code",[t._v("o?")]),t._v("。逗号和两个数之间不能有空格")])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("x|y")])]),t._v(" "),a("td",[t._v("匹配 x 或者 y")]),t._v(" "),a("td",[a("code",[t._v("z|food")]),t._v(" 能匹配 "),a("code",[t._v("z")]),t._v(" 或者 "),a("code",[t._v("food")]),t._v("。"),a("code",[t._v("(z|f)ood")]),t._v(" 则匹配 "),a("code",[t._v("zood")]),t._v(" 或 "),a("code",[t._v("food")])])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("[xyz]")])]),t._v(" "),a("td",[t._v("匹配所包含的任意一个字符")]),t._v(" "),a("td",[a("code",[t._v("[abc]")]),t._v("可以匹配"),a("code",[t._v("plain")]),t._v("中的 "),a("code",[t._v("a")])])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("[^xyz]")])]),t._v(" "),a("td",[t._v("求反。匹配未包含的任意字符")]),t._v(" "),a("td",[a("code",[t._v("[^abc]")]),t._v(" 可以匹配"),a("code",[t._v("plain")]),t._v(" 中的除"),a("code",[t._v("a")]),t._v("外的其他字符")])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("[a-z]")])]),t._v(" "),a("td",[t._v("字符范围。匹配指定范围内的任意字符")]),t._v(" "),a("td",[a("code",[t._v("[a-z]")]),t._v(" 可以匹配 "),a("code",[t._v("a")]),t._v(" 到 "),a("code",[t._v("z")]),t._v(" 范围内的任意小写字母字符。注意：[A-Z] 才匹配大写英文字母,"),a("code",[t._v("[^a-z]")]),t._v("则是取反")])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("\\b")])]),t._v(" "),a("td",[t._v("匹配一个单词边界，也就是指单词和空格间的位置")]),t._v(" "),a("td",[a("code",[t._v("er\\b")]),t._v(" 可以匹配 "),a("code",[t._v("never")]),t._v(" 中的 "),a("code",[t._v("er")]),t._v("，但不能匹配 "),a("code",[t._v("verb")]),t._v(" 中的 "),a("code",[t._v("er")])])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("\\B")])]),t._v(" "),a("td",[t._v("匹配非单词边界")]),t._v(" "),a("td",[a("code",[t._v("er\\B")]),t._v(" 不可以匹配 "),a("code",[t._v("never")]),t._v(" 中的 "),a("code",[t._v("er")]),t._v("，但能匹配 "),a("code",[t._v("verb")]),t._v(" 中的 "),a("code",[t._v("er")])])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("\\d")])]),t._v(" "),a("td",[t._v("匹配一个数字字符。等价于[0-9]")]),t._v(" "),a("td",[a("code",[t._v("\\d")]),t._v(" 能匹配 "),a("code",[t._v("4 = IV")]),t._v(" 中的 "),a("code",[t._v("4")])])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("\\D")])]),t._v(" "),a("td",[t._v("匹配一个非数字字符。等价于[^0-9]")]),t._v(" "),a("td",[a("code",[t._v("\\D")]),t._v(" 能匹配 "),a("code",[t._v("4 = IV")]),t._v(" 中的 "),a("code",[t._v("=、I、v")])])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("\\n")])]),t._v(" "),a("td",[t._v("匹配一个换行符。等价于"),a("code",[t._v("\\x0a")]),t._v("和"),a("code",[t._v("\\cJ")])]),t._v(" "),a("td",[a("code",[t._v("\\r\\n(\\w+)")]),t._v(" 能匹配 "),a("code",[t._v("\\r\\nThese are\\ntwo lines")]),t._v(" 中的 "),a("code",[t._v("\\r\\nThese")])])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("\\r")])]),t._v(" "),a("td",[t._v("匹配一个回车符。等价于"),a("code",[t._v("\\x0d")]),t._v("和"),a("code",[t._v("\\cM")])]),t._v(" "),a("td",[a("code",[t._v("\\r\\n(\\w+)")]),t._v(" 能匹配 "),a("code",[t._v("\\r\\nThese are\\ntwo lines")]),t._v(". 中的 "),a("code",[t._v("\\r\\nThese")])])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("\\w")])]),t._v(" "),a("td",[t._v("匹配包括下划线的任何单词字符。等价于 "),a("code",[t._v("[A-Za-z0-9_]")])]),t._v(" "),a("td",[a("code",[t._v("ID A1.3")]),t._v(" 中的 "),a("code",[t._v("I、D、A、1、3")])])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("\\W")])]),t._v(" "),a("td",[t._v("匹配任何非单词字符。等价于 "),a("code",[t._v("[^A-Za-z0-9_]")])]),t._v(" "),a("td",[a("code",[t._v("ID A1.3")]),t._v(" 中的 "),a("code",[t._v(".")])])])])]),t._v(" "),a("h3",{attrs:{id:"匹配优先级"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#匹配优先级"}},[t._v("#")]),t._v(" 匹配优先级")]),t._v(" "),a("ol",[a("li",[a("code",[t._v("\\")]),t._v("：转义符")]),t._v(" "),a("li",[a("code",[t._v("()")]),t._v("，"),a("code",[t._v("(?:)")]),t._v("，"),a("code",[t._v("(?=)")]),t._v("，"),a("code",[t._v("[]")])]),t._v(" "),a("li",[a("code",[t._v("*")]),t._v("，"),a("code",[t._v("+")]),t._v("，"),a("code",[t._v("?")]),t._v("，"),a("code",[t._v("{n}")]),t._v("，"),a("code",[t._v("{n,}")]),t._v("，"),a("code",[t._v("{n,m}")])]),t._v(" "),a("li",[a("code",[t._v("^")]),t._v("，"),a("code",[t._v("$")])]),t._v(" "),a("li",[a("code",[t._v("|")])])]),t._v(" "),a("h3",{attrs:{id:"修饰符"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#修饰符"}},[t._v("#")]),t._v(" 修饰符")]),t._v(" "),a("p",[t._v("正则表达式常见的修饰符如下：")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("g")]),t._v("：表示全局模式，即运用于所有字符串")]),t._v(" "),a("li",[a("code",[t._v("i")]),t._v("：表示不区分大小写，即匹配时忽略字符串的大小写")]),t._v(" "),a("li",[a("code",[t._v("m")]),t._v("：表示多行模式，强制 "),a("code",[t._v("$")]),t._v("和 "),a("code",[t._v("^")]),t._v(" 分别匹配每个换行符")])]),t._v(" "),a("h3",{attrs:{id:"regexp-实例方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#regexp-实例方法"}},[t._v("#")]),t._v(" RegExp 实例方法")]),t._v(" "),a("p",[t._v("RegExp 实例置了"),a("code",[t._v("test()")]),t._v("和"),a("code",[t._v("exec()")]),t._v(" 这两个方法来校验正则表达式。下面来分别看一下这两个方法")]),t._v(" "),a("ol",[a("li",[a("code",[t._v("test()")]),t._v(": 用于检测一个字符串是否匹配某个模式，如果字符串中含有匹配的文本，则返回 true，否则返回 false。")])]),t._v(" "),a("div",{staticClass:"language-javascript extra-class"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" regex1 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token regex"}},[a("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),a("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[t._v("a")]),a("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),a("span",{pre:!0,attrs:{class:"token regex-flags"}},[t._v("ig")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" regex2 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token regex"}},[a("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),a("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[t._v("hello")]),a("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),a("span",{pre:!0,attrs:{class:"token regex-flags"}},[t._v("ig")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" str "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Action speak louder than words"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("regex1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("test")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("str"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// true")]),t._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("regex2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("test")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("str"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// false")]),t._v("\n")])])]),a("ol",{attrs:{start:"2"}},[a("li",[a("code",[t._v("exec()")]),t._v(": 用于检索字符串中的正则表达式的匹配。该函数返回一个数组，其中存放匹配的结果。如果未找到匹配，则返回值为 null")])]),t._v(" "),a("div",{staticClass:"language-javascript extra-class"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" regex1 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token regex"}},[a("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),a("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[t._v("a")]),a("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),a("span",{pre:!0,attrs:{class:"token regex-flags"}},[t._v("ig")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" regex2 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token regex"}},[a("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),a("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[t._v("hello")]),a("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),a("span",{pre:!0,attrs:{class:"token regex-flags"}},[t._v("ig")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" str "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Action speak louder than words"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("regex1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("exec")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("str"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ['A', index: 0, input: 'Action speak louder than words', groups: undefined]")]),t._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("regex2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("exec")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("str"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// null")]),t._v("\n")])])]),a("h3",{attrs:{id:"字符串方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#字符串方法"}},[t._v("#")]),t._v(" 字符串方法")]),t._v(" "),a("p",[t._v("在 JavaScript 中有6种常用的方法是支持正则表达式的，下面来分别看看这些方法")]),t._v(" "),a("ol",[a("li",[t._v("search()\n"),a("code",[t._v("search()")]),t._v(" 方法用于检索字符串中指定的子字符串，或检索与正则表达式相匹配的子字符串，并返回子串的起始位置。如果没有找到任何匹配的子串，则返回 -1")])]),t._v(" "),a("div",{staticClass:"language-javascript extra-class"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" regex1 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token regex"}},[a("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),a("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[t._v("a")]),a("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),a("span",{pre:!0,attrs:{class:"token regex-flags"}},[t._v("ig")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" regex2 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token regex"}},[a("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),a("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[t._v("p")]),a("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),a("span",{pre:!0,attrs:{class:"token regex-flags"}},[t._v("ig")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" regex3 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token regex"}},[a("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),a("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[t._v("m")]),a("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),a("span",{pre:!0,attrs:{class:"token regex-flags"}},[t._v("ig")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" str "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Action speak louder than words"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("str"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("search")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("regex1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 输出结果：0")]),t._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("str"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("search")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("regex2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 输出结果：8")]),t._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("str"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("search")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("regex3"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 输出结果：-1")]),t._v("\n")])])]),a("ol",{attrs:{start:"2"}},[a("li",[t._v("match()\n"),a("code",[t._v("match()")]),t._v(" 方法可在字符串内检索指定的值，或找到一个或多个正则表达式的匹配。如果没有找到任何匹配的文本， "),a("code",[t._v("match()")]),t._v(" 将返回 "),a("code",[t._v("null")]),t._v("。否则，它将返回一个数组，其中存放了与它找到的匹配文本有关的信息。")])]),t._v(" "),a("div",{staticClass:"language-javascript extra-class"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" regex1 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token regex"}},[a("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),a("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[t._v("a")]),a("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),a("span",{pre:!0,attrs:{class:"token regex-flags"}},[t._v("ig")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" regex2 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token regex"}},[a("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),a("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[t._v("a")]),a("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),a("span",{pre:!0,attrs:{class:"token regex-flags"}},[t._v("i")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" regex3 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token regex"}},[a("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),a("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[t._v("m")]),a("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),a("span",{pre:!0,attrs:{class:"token regex-flags"}},[t._v("ig")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" str "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Action speak louder than words"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("str"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("match")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("regex1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 输出结果：['A', 'a', 'a']")]),t._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("str"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("match")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("regex2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 输出结果：['A', index: 0, input: 'Action speak louder than words', groups: undefined]")]),t._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("str"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("match")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("regex3"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 输出结果：null")]),t._v("\n")])])]),a("ol",{attrs:{start:"3"}},[a("li",[t._v("matchAll()\n"),a("code",[t._v("matchAll()")]),t._v(" 方法返回一个包含所有匹配正则表达式的结果及分组捕获组的迭代器。因为返回的是遍历器，所以通常使用"),a("code",[t._v("for...of")]),t._v("循环取出。")])]),t._v(" "),a("div",{staticClass:"language-javascript extra-class"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" match "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("of")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'abcabc'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("matchAll")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token regex"}},[a("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),a("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[t._v("a")]),a("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),a("span",{pre:!0,attrs:{class:"token regex-flags"}},[t._v("g")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("match"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('//["a", index: 0, input: "abcabc", groups: undefined]')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('//["a", index: 3, input: "abcabc", groups: undefined]')]),t._v("\n")])])]),a("ol",{attrs:{start:"4"}},[a("li",[t._v("replace()\n"),a("code",[t._v("replace()")]),t._v(" 用于在字符串中用一些字符串替换另一些字符串，或替换一个与正则表达式匹配的子串")])]),t._v(" "),a("div",{staticClass:"language-javascript extra-class"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" regex "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token regex"}},[a("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),a("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[t._v("A")]),a("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),a("span",{pre:!0,attrs:{class:"token regex-flags"}},[t._v("g")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" str "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Action speak louder than words"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("str"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("replace")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("regex"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'a'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 输出结果：action speak louder than words")]),t._v("\n")])])]),a("ol",{attrs:{start:"5"}},[a("li",[t._v("replaceAll()\n"),a("code",[t._v("replaceAll()")]),t._v(" 方法用于在字符串中用一些字符替换另一些字符，或替换一个与正则表达式匹配的子串，该函数会替换所有匹配到的子字符串")])]),t._v(" "),a("div",{staticClass:"language-javascript extra-class"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" regex "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token regex"}},[a("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),a("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[t._v("a")]),a("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),a("span",{pre:!0,attrs:{class:"token regex-flags"}},[t._v("g")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" str "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Action speak louder than words"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("str"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("replaceAll")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("regex"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'A'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 输出结果：Action speAk louder thAn words")]),t._v("\n")])])]),a("ol",{attrs:{start:"6"}},[a("li",[t._v("split()\n"),a("code",[t._v("split()")]),t._v(" 方法用于把一个字符串分割成字符串数组。其第一个参数是一个字符串或正则表达式，从该参数指定的地方分割字符串")])]),t._v(" "),a("div",{staticClass:"language-javascript extra-class"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" regex "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token regex"}},[a("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),a("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[t._v(" ")]),a("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),a("span",{pre:!0,attrs:{class:"token regex-flags"}},[t._v("gi")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" str "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Action speak louder than words"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("str"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("split")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("regex"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 输出结果：['Action', 'speak', 'louder', 'than', 'words']")]),t._v("\n")])])]),a("h3",{attrs:{id:"常用的正则"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#常用的正则"}},[t._v("#")]),t._v(" 常用的正则")]),t._v(" "),a("h4",{attrs:{id:"匹配邮箱"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#匹配邮箱"}},[t._v("#")]),t._v(" 匹配邮箱")]),t._v(" "),a("div",{staticClass:"language-javascript extra-class"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token regex"}},[a("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),a("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[t._v("^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9-]+(?:\\.[ a-zA-Z0-9-]+)*$")]),a("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),a("span",{pre:!0,attrs:{class:"token regex-flags"}},[t._v("g")])]),t._v("\n")])])]),a("p",[t._v("下面来看一下这个正则表达式每一部分的含义：")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("^[a-zA-Z0-9.!#$%&'*+/=?^_{|}~-]+")]),t._v("：检查是否使用了所有有效字符并且至少有了一个,最后的 "),a("code",[t._v("+")]),t._v(" 表示至少有一位；")]),t._v(" "),a("li",[a("code",[t._v("[a-zA-Z0-9-]+")]),t._v("：这一部分用来检验主机名是否有效，主机名可以是大小写字母、数字、中横线。最后的 "),a("code",[t._v("+")]),t._v(" 表示至少有一位；")]),t._v(" "),a("li",[a("code",[t._v("(?:\\.[a-zA-Z0-9-]+)*")]),t._v("：这一部分是可选的域名后缀，这里使用的 "),a("code",[t._v("*")]),t._v("就表示前面的字符是0个或者多个，这样"),a("code",[t._v(".com")]),t._v("、"),a("code",[t._v(".com")]),t._v(","),a("code",[t._v(".cn")]),t._v("等域名都可以匹配到")]),t._v(" "),a("li",[a("code",[t._v("^")]),t._v("和"),a("code",[t._v("$")]),t._v("可以保证匹配从字符串的开头到结尾进行匹配，也就是只对整个邮箱字符串进行匹配，不考虑部分匹配")])]),t._v(" "),a("h4",{attrs:{id:"匹配身份证"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#匹配身份证"}},[t._v("#")]),t._v(" 匹配身份证")]),t._v(" "),a("div",{staticClass:"language-javascript extra-class"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" reg "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token regex"}},[a("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),a("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[t._v("^(\\d{6})(\\d{4})(\\d{2})(\\d{2})(\\d{2})(\\d)(\\d|X)$")]),a("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("ul",[a("li",[a("code",[t._v("(\\d{6})")]),t._v(": 前6位代表省市区/县，可以查询出来所有结果")]),t._v(" "),a("li",[a("code",[t._v("(\\d{4})(\\d{2})(\\d{2})")]),t._v("：接着8位是出生年月日")]),t._v(" "),a("li",[a("code",[t._v("(\\d{2})")]),t._v(": 接着2位是签发机关编码")]),t._v(" "),a("li",[a("code",[t._v("(\\d)(\\d|X)")]),t._v(": 倒数第二位代表性别，基数是男，偶数是女，最后一位可以是X")])]),t._v(" "),a("h4",{attrs:{id:"匹配手机号"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#匹配手机号"}},[t._v("#")]),t._v(" 匹配手机号")]),t._v(" "),a("div",{staticClass:"language-javascript extra-class"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" reg "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token regex"}},[a("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),a("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[t._v("^1(3\\d|4[5-9]|5[0-35-9]|6[567]|7[0-8]|8\\d|9[0-35-9])\\d{8}$")]),a("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")])]),t._v("\n")])])]),a("h3",{attrs:{id:"贪婪模式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#贪婪模式"}},[t._v("#")]),t._v(" 贪婪模式")]),t._v(" "),a("blockquote",[a("p",[t._v("贪婪与非贪婪模式影响的是被量词修饰的子表达式的匹配行为，贪婪模式在整个表达式匹配成功的前提下，尽可能多的匹配，而非贪婪模式在整个表达式匹配成功的前提下，尽可能少的匹配。非贪婪模式只被部分NFA引擎所支持。")])]),t._v(" "),a("p",[t._v("属于贪婪模式的量词，也叫做匹配优先量词，包括：\n"),a("code",[t._v("{m,n}")]),t._v("、"),a("code",[t._v("{m,}")]),t._v("、"),a("code",[t._v("?")]),t._v("、"),a("code",[t._v("+")]),t._v("、"),a("code",[t._v("*")])]),t._v(" "),a("p",[t._v("从应用的角度，回答一下“什么是贪婪与非贪婪模式？”\n举个栗子：\n源字符串："),a("code",[t._v("aa<div>test1</div>bb<div>test2</div>cc")]),t._v("\n正则表达式一："),a("code",[t._v("<div>.*</div>")]),t._v("\n匹配结果一："),a("code",[t._v("<div>test1</div>bb<div>test2</div>")]),t._v("\n正则表达式二："),a("code",[t._v("<div>.*?</div>")]),t._v("\n匹配结果二："),a("code",[t._v("<div>test1</div>")]),t._v("（这里指的是一次匹配结果，所以没包括")]),a("div",[t._v("test2")]),t._v("）"),a("p"),t._v(" "),a("p",[t._v("仅从应用角度分析，可以这样认为，贪婪模式，就是在整个表达式匹配成功的前提下，尽可能多的匹配，也就是所谓的“贪婪”，通俗点讲，就是看到想要的，有多少就捡多少，除非再也没有想要的了。非贪婪模式，就是在整个表达式匹配成功的前提下，尽可能少的匹配，也就是所谓的“非贪婪”，通俗点讲，就是找到一个想要的捡起来就行了，至于还有没有没捡的就不管了。")]),t._v(" "),a("p",[t._v("总结：")]),t._v(" "),a("ul",[a("li",[t._v("贪婪匹配：匹配上从第一个到最后一个之间的所有符合条件的内容")]),t._v(" "),a("li",[t._v("非贪婪匹配：找到一个符合条件的内容即返回")])]),t._v(" "),a("h3",{attrs:{id:"在线正则网址"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#在线正则网址"}},[t._v("#")]),t._v(" 在线正则网址")]),t._v(" "),a("p",[t._v("平时业务开发中，使用正则时，需要各类情况都考虑周全。除简单的匹配和替换文本，其他不建议个人手写正则，费时且可能遗漏匹配情况，推荐使用在线网址查阅，例如"),a("a",{attrs:{href:"https://tool.chinaz.com/regex",target:"_blank",rel:"noopener noreferrer"}},[t._v("站长工具"),a("OutboundLink")],1),t._v("。常用的邮箱，手机号，网址检测，可以自己记录笔记，便于查阅。")]),t._v(" "),a("p",[t._v("那有同学说了，那你还上面讲解这么多废话？")]),t._v(" "),a("p",[t._v("首先咱们学习正则，可以拓展技术池；其次在了解其用法后去找对应的正则，可以看得懂正则的意思，在有错误的时候，也可以尽快发现并解决。")])])}),[],!1,null,null,null);s.default=n.exports}}]);